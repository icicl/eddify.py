import os as _
import keyword as __
from random import randrange as ___
____=True
_____=[chr(0o141)+chr((50+0x30))+chr(0o163), chr(0x64)+chr((0o10+0b1100001))+chr((75+24))+chr((97+0b10011)), chr((0o144+0x4))+chr((0b1001000+0b11101))+chr((0x5e+0xe))+chr(112), chr(0x6d)+chr((0x1e+75))+chr((0o40+0b1001110)), chr(115)+chr((0x4a+27))+chr((108+0b1000))+chr(0b1100001)+chr(0x74)+chr(116)+chr(114), chr(0x61)+chr((5+103))+chr((84+0x18)), chr(0x64)+chr((0x4a+0o37))+chr((0o54+0b1000110)), chr((27+77))+chr((0x29+0b111100))+chr((0x6d+11)), chr(110)+chr(101)+chr((0o124+0x24))+chr(0o164), chr((0b1011000+0b11011))+chr((0x7+0b1100101))+chr(0b1101001)+chr((0b101000+0x3b))+chr((84+0b10001)), chr((0b1101+0x54))+chr(110)+chr((0o50+0x51)), chr(0x64)+chr((0x3+0b1100110))+chr(118)+chr(0b1101101)+chr((0x16+0b1011001))+chr(0o144), chr(105)+chr(0x64), chr((0b1001101+34))+chr(0b1100010)+chr(0x6a)+chr(0b1100101)+chr((0x61+0o2))+chr((0o121+35)), chr((0x2+0b1110001))+chr(0o157)+chr((56+0x3a))+chr((0x4f+37))+chr(101)+chr((0x2f+0o65)), chr((0x14+0x4d))+chr((0b1011010+25))+chr((0b11101+70))+chr((0x23+0x46))+chr(0x69), chr((42+0o73))+chr(0b1101110)+chr((0x2d+72))+chr((0o133+18))+chr((0b1100011+0b10))+chr(0b1110010)+chr((0x35+0b101100))+chr((0o0+0b1110100))+chr((0x14+0x51)), chr(0x69)+chr((0x7+0o147))+chr((0o25+0x5b))+chr((0o151+0xc))+chr(0o164), chr((0x2+109))+chr((75+0b11000))+chr((0b10110+0b1011110)), chr((0b101000+75))+chr(0x74)+chr((0x38+41))+chr(0x74)+chr((0+0x69))+chr(99)+chr(0x6d)+chr((0o105+0o40))+chr((0b100011+0o121))+chr(0b1101000)+chr((0x64+0xb))+chr((76+0b11000)), chr((0x55+13))+chr(0b1101001)+chr((0b110111+55)), chr(0b1100101)+chr(118)+chr((0b111011+0o46))+chr((0o15+0x5f)), chr((0o37+74))+chr(110)+chr(0b1110100), chr((0b10100+0o133))+chr((0b1000001+0b101111))+chr((84+0b10001))+chr((0x51+29)), chr((0o46+0x4d))+chr(0o164)+chr((0o70+0b111010)), chr(98)+chr((0b100101+0o112))+chr((0b101011+0o104))+chr((0o75+0o57)), chr((0x35+0x30))+chr((0x35+0x43))+chr((67+0o42))+chr((0o22+0x51)), chr((0b110000+0b111001))+chr((36+0b1001111))+chr((0o145+0x4))+chr((32+0b1001110))+chr((0o121+0o42))+chr(0b1110100)+chr((0o113+0x16))+chr((43+67))+chr((0b101010+57))+chr(0x65), chr((0xf+96))+chr((0o147+0xb))+chr(0o144), chr(0b1110011)+chr(0x75)+chr((0x45+0o50)), chr((0b110110+44))+chr((47+0b1001010))+chr((0o137+21))+chr((0b1011010+11))+chr((0x1a+0o107))+chr((0x17+91))+chr((0b1011001+0b11001))+chr((0b1011100+0x5))+chr(0b1111001), chr(102)+chr((0x5f+0xa))+chr((0o77+0x2d))+chr(0o164)+chr((0b110101+0b110000))+chr(0o162), chr((0o132+0xf))+chr(0x73)+chr((0o67+0x3c))+chr((11+106))+chr(98)+chr((86+0xd))+chr((0x5e+0b1110))+chr((0b10010+0b1001111))+chr((0x34+63))+chr((0b11011+88)), chr((99+0xd))+chr((0x7+104))+chr((0x65+0o22)), chr((0b1011111+0o24))+chr((0b100110+0o117))+chr((23+89))+chr((0o106+0b11111))+chr((0o21+0b1100001)), chr((0b110000+0x32))+chr(0x79)+chr(0o164)+chr((91+10))+chr((0b110110+0b111101)), chr(0o146)+chr((0o111+0x23))+chr(111)+chr((0x34+0b101101))+chr((0b1000100+0o60)), chr(0b1101001)+chr((0b110000+0x44))+chr((8+0o135))+chr((0b10111+91)), chr((0x4c+0b100100))+chr(114)+chr(0x69)+chr((0x20+0o116))+chr((0b1100+0x68)), chr((0x33+0o101))+chr((0b101110+0o107))+chr((0x33+0o75))+chr((0x3f+0b101101))+chr((0x56+0b1111)), chr((0b10000+0x53))+chr(0x61)+chr((95+0b1101))+chr(108)+chr(0o141)+chr(0o142)+chr((0b111000+0o64))+chr(0b1100101), chr((0o73+0b101011))+chr((2+109))+chr(114)+chr((0b101100+0b1000001))+chr(0o141)+chr((0x52+0x22)), chr(0b1101100)+chr((30+0x47))+chr((0x33+0b111011)), chr(112)+chr((0x5b+23))+chr((92+0x13))+chr((0o126+0x1a))+chr((0o117+22))+chr((0b10000+0b1100010))+chr((0o41+0o123))+chr((0b1100+109)), chr((0x69+0o13))+chr(0o171)+chr((0o63+61))+chr((0b1100010+0b11)), chr((0b10000+0b1010011))+chr((0b10000+0b1011000))+chr((0b110+0x6c)), chr((0o53+59))+chr((32+0b1010010))+chr((0b100001+0o116))+chr(0b1111010)+chr((0o40+0b1000101))+chr(0o156)+chr((0o25+0b1011110))+chr((0b1010001+20))+chr((90+0o32)), chr((0o116+0x1e))+chr((0b1001101+0x1c))+chr((96+0o23))+chr((101+0xf)), chr(0b1110010)+chr((0b100100+0b111101))+chr(0o156)+chr((0o131+14))+chr(101), chr(0x76)+chr((71+0b11010))+chr(0o162)+chr((0o112+0x29)), chr((34+0o101))+chr((64+0o54))+chr((0b101111+50))+chr(0o163)+chr((0o31+0b1011010))+chr((53+56))+chr(0b1100101)+chr(116)+chr((54+0o62))+chr((0x3a+0o65))+chr(100), chr((0x3d+0b101010))+chr((35+0b1000010))+chr((93+0x17))+chr((0b11+94))+chr((0b1000100+0o60))+chr((0x29+0b1001011))+chr((0x10+0b1100010)), chr((0b1000000+0x2c))+chr((40+0o107))+chr((0o125+0o16))+chr((0b1111+0b1010010))+chr((0b101110+62))+chr(0x73), chr((63+51))+chr(0o145)+chr((3+0o155))+chr((45+0o105)), chr(0x7a)+chr(0o151)+chr((0b1101000+0x8)), chr((0x3d+38))+chr((21+0b1011010))+chr(0o155)+chr((0b111110+0x32))+chr(0b1101001)+chr((0x2c+0b1000000))+chr((0o23+0o122)), chr((64+0o47))+chr(0b1101100)+chr(111)+chr((0o54+0o66))+chr(0x61)+chr(0o154)+chr(0o163), chr(0b1101101)+chr((0x1c+0o105))+chr((0x2a+0b1000110)), chr((0o123+0o37))+chr(0o145)+chr((27+0x5b))+chr(101)+chr((0x68+0o12))+chr(0b1110011)+chr((0x31+52))+chr(0x64), chr((0b100000+0x3f))+chr(0x5f)+chr((0o26+0x53))+chr((0x42+0x2b))+chr((0o55+0x43))+chr(0o157)+chr((0o134+0o26))+chr((0o75+0x37))+chr((0x35+0b101010))+chr((0x1e+0b1000001)), chr((50+49))+chr((23+0o130))+chr(0o155)+chr((0b110111+0o71))+chr((0o12+98))+chr((46+0b110111))+chr(120), chr((0x28+64))+chr((0b100100+0o75))+chr((0x4e+37))+chr((0x3a+0o47))+chr((0x3b+0b111001))+chr(0b1110100)+chr((0x12+96)), chr((0o40+0b1001101))+chr((0x44+29))+chr((0x5e+0x1a)), chr((0x55+0b11101))+chr((100+0b1011))+chr((57+60))+chr(0o156)+chr((0o131+0o13)), chr(100)+chr((0x3d+0b101000))+chr((0o146+0x6))+chr((0x45+0b11100))+chr((0o34+0x58))+chr(0x74)+chr((0b111+0b1101011)), chr(0o150)+chr((26+71))+chr((81+34))+chr(0b1101000), chr((0x57+0b10110))+chr(101)+chr((0x65+8))+chr(0o157)+chr((0b110100+0b111110))+chr((0b1010000+0x29))+chr((66+52))+chr((0b1001110+0b11011))+chr((0b1010001+0b10100))+chr((0o23+0x64)), chr((0b1011001+0x1a))+chr(101)+chr((0x54+0x20))]
______=__.kwlist + _____

_______=str(input(chr((0o70+0b1110))+chr((0o35+0o114))+chr(0o154)+chr((68+0o41))+chr((0b1000+24))+chr((107+0b1001))+chr((110+0o1))+chr(0b100000)+chr((0xc+0o71))+chr((57+0b101011))+chr((0b1001+0o133))+chr((0b1000100+0o65))+chr(0o151)+chr((0b1010011+0o23))+chr(0b1111001)+chr((0x2b+0o17))))
________=dict()
_________=(0b0+0b1)
__________=set()
def ___________(____________,_____________,______________=0b0):
    while chr((0o12+22))+chr(0b111101) in ____________:____________=____________.replace(chr(0o40)+chr((31+0b11110)),chr((0b100000+0x1d)))
    while chr((0b110000+0b1101))+chr((0xa+22)) in ____________:____________=____________.replace(chr((0b1110+0b101111))+chr(32),chr(0o75))
    if ______________:
        global _______________
        _______________+=______________
    if ____________=="":return ____________
    if chr(40) in ____________:
        return ___________(____________.split(chr(0x28))[0o0],_____________) + chr((0o17+0o31)) + chr((0b110+0o42)).join(___________(________________,_____________,(0x0+1)) for ________________ in ____________.split(chr((0x1e+0b1010)))[1:])
    if chr(0x29) in ____________:
        return ___________(____________.split(chr(0b101001))[0o0],_____________) + chr((24+0x11)) + chr((0b101+0b100100)).join(___________(________________,_____________,-(0x0+0x1)) for ________________ in ____________.split(chr((0b1111+0b11010)))[(0x0+0o1):])
    if len(_____________) > 0o0:
        if _______________ and _____________[0x0]==chr((0b101011+18)) and ____________.count(chr((30+0b11111)))==(0+0b1):
            _________________=input(chr(0x69)+chr(0o163)+chr((16+16))+chr(0o146)+chr(0b1110101)+chr(110)+chr(0b1100011)+chr((0b1011110+0b10110))+chr((0o16+91))+chr((0o131+0x16))+chr(0o156)+chr((0b1010+0o26))+chr(112)+chr((0x5d+0o4))+chr((0x71+0o1))+chr((0b100101+0x3c))+chr(109)+chr(0x65)+chr((0o130+0b11100))+chr((0b1011+0o132))+chr((0b1110001+0x1))+chr((10+22))+____________.split(chr(0b111101))[0o0]+chr(32)+chr((0b100101+0o104))+chr(0b1101110)+chr(0x20)+chr((0b1000010+0o52))+chr(0b1101001)+chr((0b1110+0o140))+chr((0x5f+0o6))+chr((7+0o31))+__________________.strip()+chr(32)+chr(0o146)+chr((0b1001011+0o44))+chr((0x62+0o20))+chr(0x20)+chr(0x61)+chr(0o40)+chr((0o70+0b101110))+chr((0b1000101+0x30))+chr(110)+chr((0b101000+59))+chr((92+0o30))+chr((82+0x17))+chr((0b10+0o155))+chr((0b1010001+0x1d))+chr(32)+chr(0x64)+chr((0xd+0x58))+chr((0b11100+0b1001010))+chr(0b1101001)+chr((0b1100011+0b1011))+chr((0b100011+66))+chr((0b1100001+3))+chr((0o14+0b10100))+chr((0b101+100))+chr(0b1101110)+chr(0o40)+chr((0x4f+0b100101))+chr(0o150)+chr(0x69)+chr(115)+chr((0o24+0o14))+chr((54+0b110000))+chr((15+0b1011010))+chr(0x6c)+chr((76+0b11001))+chr(63)+chr(32)+chr((55+0x42))+chr(47)+chr(110)+chr(0b100000)+chr((0b1000100+0o27))+chr((59+0x4))+chr(0b1011101)+chr(32)+chr((0b10000+0b1010110))+chr(0o157)+chr((0x6c+0x6))+chr(32)+chr((0o47+0o106))+chr(0o157)+chr(0b1110010)+chr((77+0o30))+chr((0b10011+0o15))+chr((84+0b10101))+chr(0o156)+chr((0o25+0o121))+chr(0b1101111)+chr((0x4+0o66)))
            while not _________________ in (chr(0o171),chr((50+0x3c))):
                if _________________==chr(0o77):
                    print(chr(0b1001001)+chr((0o122+0o24))+chr((0o34+0x4))+chr((0xf+0b1101010))+chr(0o157)+chr((0x62+0x13))+chr((0b11110+0b10))+chr(97)+chr(0b1110010)+chr((0b1001110+0x17))+chr((2+0o36))+chr((0o2+0o156))+chr((13+0o124))+chr((6+0x6d))+chr((0b110+109))+chr(0x69)+chr((0b110110+0b111000))+chr((0b1000+95))+chr((0x18+8))+chr((0x5+0x5c))+chr(0b1101110)+chr((0+0b100000))+chr((0o21+0x50))+chr(114)+chr(103)+chr(0b1110101)+chr(0x6d)+chr((0b10010+0x53))+chr(0b1101110)+chr((0b1101+0x67))+chr(0b100000)+chr((0o140+0o25))+chr(115)+chr((0o20+0x59))+chr((79+0b11111))+chr(0b1100111)+chr((0o23+13))+chr((0x43+0b100110))+chr((0x73+1))+chr((0o153+0o10))+chr((0o23+0xd))+chr(110)+chr(97)+chr((0x5c+0o21))+chr((0o144+0b1))+chr((0b11100+4))+chr((109+7))+chr((0x16+89))+chr((5+0x1b))+chr((20+77))+chr(0o40)+chr((70+0o40))+chr(0b1110101)+chr(0b1101110)+chr(0x63)+chr(0b1110100)+chr((24+81))+chr((0o41+78))+chr(110)+chr(0b100000)+chr(0o142)+chr((23+0o116))+chr(105)+chr((0o23+0x5b))+chr((0x66+1))+chr((0o22+0xe))+chr((0o107+28))+chr(0x61)+chr(0x6c)+chr((0o45+0b1000111))+chr((81+0o24))+chr((0x21+0x43))+chr((0b11000+0o10))+chr((0o10+0o141))+chr((0x33+0x40))+chr((0o17+0b10001))+chr((0x1c+72))+chr((0o25+0o120))+chr((0o7+0x5f))+chr(105)+chr((0b110110+0o70))+chr(0b1100101)+chr(100)+chr((10+0x16))+chr((0x48+0o57))+chr((0b1000011+0b100110))+chr(0o164)+chr(0x68)+chr((44+0b111101))+chr((0b10111+87))+chr((0xb+0o25))+chr(116)+chr((56+0b110000))+chr(0x69)+chr((0b1110010+0x1))+chr((0b11000+8))+chr(0x66)+chr((0b111000+0x31))+chr(0b1101100)+chr(0b1100101)+chr((0x1f+0b1))+chr((0x3f+0b101010))+chr((0b111+0x19))+chr(0b1101110)+chr((79+22))+chr((14+0b1010111))+chr(0o144)+chr((0b10000+16))+chr((0b1101000+0xc))+chr((0xd+0x62))+chr((28+0x4))+chr((20+0x5e))+chr((91+0o12))+chr(0b1110000)+chr((0b1011111+0o15))+chr((0xc+0b1010101))+chr((19+0b1010000))+chr((0o44+0o101))+chr((0x16+10))+chr((0b101+111))+chr((0o140+0x8))+chr(101)+chr((0b1111+17))+chr((0o17+0o137))+chr(0b1100001)+chr(109)+chr((0o103+0o42))+chr((15+0o37))+chr((27+0o5))+chr((62+0o13))+chr((0o70+0x2e))+chr((0o21+0b1111))+chr((0o54+0x48))+chr((88+16))+chr(0x65)+chr((0o32+0o6))+chr((0x3d+41))+chr(117)+chr((0o46+72))+chr((0x4d+0b10110))+chr((25+0x5b))+chr((0o116+27))+chr((0o21+0o136))+chr(0b1101110)+chr(0o40)+chr((0b11000+81))+chr((0b1100111+0b1100))+chr((0x1c+0o4))+chr((0o51+0o71))+chr(117)+chr((0b101011+62))+chr((0x66+0x6))+chr((96+0b10100))+chr(32)+chr((11+0o136))+chr(0b1101110)+chr((0x11+0b1111))+chr((0o100+0b101111))+chr((88+0x1a))+chr(0b100000)+chr((0x39+0o60))+chr(0x6d)+chr((78+0x22))+chr((0x14+0x5b))+chr(0b1110010)+chr((0x38+0b111100))+chr((0b1100010+0b11))+chr((0o141+0x3))+chr(0o54)+chr((15+0o21))+chr((6+0x63))+chr((0b1001000+0o54))+chr(32)+chr((82+37))+chr((0b10011+86))+chr((0o10+100))+chr((0o122+0b11010))+chr((25+0b111))+chr((0b1000111+27))+chr(0o145)+chr((15+17))+chr((0x1c+89))+chr(0o156)+chr((0b100100+0x3f))+chr((0x1f+0x49))+chr(0b1100001)+chr((0b101+105))+chr(0o147)+chr((0x48+0x1d))+chr((0o4+0b1100000))+chr(0x2e)+chr(0b100000)+chr((15+87))+chr(0b1101111)+chr((0b1001000+42))+chr((27+0b101))+chr((30+71))+chr(0o170)+chr((0x26+59))+chr((30+0o117))+chr(0b1110000)+chr((0o20+0b1011100))+chr((0x51+0b10100))+chr((0o1+0b11111))+chr(0x69)+chr((0o27+9))+chr(0x63)+chr((0x44+0o35))+chr((0b110011+0x3b))+chr((87+0b10111))+chr((0o122+0x1d))+chr((84+0x20))+chr((0o12+22))+chr(99)+chr((0x30+56))+chr((40+0b111001))+chr(0x6e)+chr((0b1101+90))+chr((0x31+52))+chr(0x20)+chr(0o42)+chr(115)+chr((0x4f+32))+chr((0b1101101+0o5))+chr(0x74)+chr((0o75+0x28))+chr((53+0o57))+chr((0x2+38))+chr((106+0x2))+chr((0b11000+0b1010001))+chr((0o35+0o126))+chr((92+0b11000))+chr(0o137)+chr((0o24+0x18))+chr(0o153)+chr((0b1010011+0x12))+chr(121)+chr(0x3d)+chr((0b100000+0b1000110))+chr((18+0b1100011))+chr(110)+chr((0b10111+0b1001100))+chr((6+0b100011))+chr(34)+chr((0b1110+0b10010))+chr((0b101101+0x39))+chr((0o43+76))+chr((0x1d+85))+chr(0o40)+chr(0x22)+chr((0o146+0b1101))+chr((0o10+0b1100111))+chr((73+0o51))+chr((95+21))+chr(0x65)+chr(0b1100100)+chr((0x26+0o2))+chr(0o137)+chr(0o137)+chr(0o54)+chr((3+0x5c))+chr(0o137)+chr((0b1110+81))+chr((0x27+0x16))+chr(0b1011111)+chr((0b100011+0o74))+chr(0b1011111)+chr((0x30+47))+chr((0x5+36))+chr(34))
                _________________=input(chr((61+60))+chr((76+0o43))+chr(117)+chr((0b11011+5))+chr((36+73))+chr(117)+chr(0x73)+chr((0x63+17))+chr(0o40)+chr(0o145)+chr((108+0o2))+chr(116)+chr(0b1100101)+chr((0x20+0o122))+chr(32)+chr(0o145)+chr(105)+chr((0xf+0b1100101))+chr((0o3+0o145))+chr((0b110110+47))+chr((0x5+0x6d))+chr(0b100000)+chr((0b110001+0o52))+chr(0x79)+chr((5+0x58))+chr((0o26+0o12))+chr((0xd+0o142))+chr(114)+chr((0xd+0o23))+chr((0b101001+50))+chr((0x35+57))+chr((0o127+0x6))+chr((43+0b1111)))
            if _________________==chr((0b1100101+0x14)):
                return chr((0x3c+0o1)).join(___________(________________,_____________[(0o0+0b1):]) for ________________ in ____________.split(chr(61)))
            else:
                return ____________.split(chr((0o20+0o55)))[0x0]+chr((57+0o4))+___________(____________.split(chr((0x2c+0b10001)))[0o1],_____________[1:])
        return _____________[0o0].join(___________(___________________,_____________[(0b0+1):]) for ___________________ in ____________.split(_____________[0b0]))
    else:
        if chr(0o56) in ____________:
            if ____________[0o0].isdigit():return ____________
            return ___________(____________.split(chr((0o36+0o20)))[0b0],_____________)+chr((0b10111+0x17))+chr(0b101110).join(____________.split(chr((0b1010+36)))[(0o0+0b1):])
        if ____________[0o0].isdigit():
            if all(________________.isdigit() for ________________ in ____________):return ____________________(int(____________))
            return ____________
        if not ____________[0o0] in "\""+chr((0o20+0o27)) and not ____________ in ______:
            global _________,________
            if ____________ in ________:
                return ________[____________]
            else:
                ________[____________]=chr((0x5c+0o3))*_________
                _________ +=(0b0+0b1)
                return ________[____________]
    return ____________
def ____________________(___________________,_____________________=False):
    if _____________________:
        if ___((0b11+0b1))==0o0:
            return hex(___________________)
        if ___(0o3)==0:
            return bin(___________________)
        if ___((0b1+0b1)):
            return oct(___________________)
        return str(___________________)
    if ___________________ and ___(0b11):
        ______________________=___(___________________)
        return chr(0x28)+____________________(______________________,True)+chr(43)+____________________(___________________-______________________,True)+chr((12+0b11101))
    return ____________________(___________________,True)
def _______________________(____________):
    if ____________=="\""+"\"" or ____________==chr((0x14+0x13))+chr(0o47):return ____________
    if not ____:return ____________
    ______________________=""
    ________________________=False
    for ___________________ in ____________[(0b0+0x1):-0x1]:
        if ________________________:
            ______________________ +=___________________+"\""+chr((0x17+0x14))
            ________________________=False
        elif ___________________=="\\":
            ______________________ +="\""+"\\"
            ________________________=True
        else:
            ______________________ +=chr((85+0b1110))+chr((0b1100011+0o5))+chr((0x37+59))+chr((21+19))+____________________(ord(___________________))+chr(0x29)+chr((0b10111+0b10100))
    return ______________________[:-(0o0+1)]


__________________=''
_______________=0b0
def _________________________(__________________________,___________________________=False):
    if ___________________________:
        global __________________
        __________________=__________________________
    if len(__________________________) > (0x2+1):
        global _________,________
        if __________________________[:(0o1+0o3)]==chr((0x62+4))+chr(0o162)+chr((0o142+0o15))+chr((0x4d+0b100000)) or __________________________[:(0o2+0x4)]==chr((0x11+88))+chr((0o51+0x44))+chr((70+0x2a))+chr(0x6f)+chr(0x72)+chr((0b101001+0x4b)):
            if chr(0x2c) in __________________________:
                return "\n".join(_________________________(__________________________.split(chr(0o151)+chr((0x5c+0o21))+chr((79+0x21))+chr(0b1101111)+chr(114)+chr(116)+chr((0b111+25)))[0o0]+chr((0x27+0x42))+chr((106+0o3))+chr((0x62+14))+chr((0x8+0x67))+chr((2+0b1110000))+chr((0xd+0x67))+chr((0o20+0b10000))+________________) for ________________ in __________________________.split(chr(105)+chr((42+0x43))+chr((0b1100000+0b10000))+chr((0b11+0o154))+chr((0b110110+0x3c))+chr(116)+chr(32))[(0b0+0o1)].split(chr(0b101100)))
            if chr((0x1c+0b100))+chr((0b11011+70))+chr((104+0xb))+chr((18+0xe)) in __________________________:
                ________[__________________________.split(chr(0b100000))[-(0x0+1)]]=chr((0xe+0x51))*_________
                _________ +=(0b0+0o1)
                return __________________________.split(chr((0b10+30))+chr(0b1100001)+chr((0b1011001+0o32))+chr((31+1)))[0o0]+chr((0o5+27))+chr((0b10100+0x4d))+chr(0b1110011)+chr(0b100000)+chr((0b1010+0o125))*(_________-(0x0+1))                
            ________[__________________________.split(chr((0x7+0o31)))[-0x1]]=chr((0o64+0x2b))*_________
            _________ +=(0b0+0o1)
            return __________________________ +chr((0o11+0x17))+chr(0b1100001)+chr((39+76))+chr((26+6))+chr((0o135+0x2))*(_________-1)
    ____________________________=[chr((0xd+0o23)),chr(0b111010),chr(0o54),chr((0b10110+0b10101)),chr((0o42+0b1011)),chr(42),chr((0o0+0o57))+chr((0x14+27)),chr(0o57),chr((0xc+0b11001)),chr((0o77+0x1c)),chr((0b110001+0b101100)),chr(0o173),chr(125),chr(0x3e),chr(60),chr(0b100001),chr((0xf+46))]
    ______________________=""
    _____________________________=__________________________
    ______________________________=0x0

    while chr((0x4+0x23)) in _____________________________ or "\"" in _____________________________:
        if _____________________________[______________________________]==chr((0o4+0x1f)):break
        if _____________________________[______________________________]=="\"":
            _______________________________=______________________________ + (0x0+0x1)
            while _____________________________[_______________________________] !="\"" or (_____________________________[_______________________________-(0o0+1)]=="\\" and not (_______________________________ < (0b0+0b10) or _____________________________[_______________________________-(0o0+0b10)]=="\\")):
                _______________________________+=(0+0x1)
            return ___________(_____________________________[:______________________________],____________________________)+_______________________(_____________________________[______________________________:_______________________________+(0o0+0b1)])+_________________________(_____________________________[_______________________________+(0b0+1):])
        if _____________________________[______________________________]==chr((0b11010+0b1101)):
            _______________________________=______________________________ + 0o1
            while _____________________________[_______________________________] !=chr(0b100111) or _____________________________[_______________________________-1]=="\\":
                _______________________________+=(0o0+1)
            return ___________(_____________________________[:______________________________],____________________________)+_______________________(_____________________________[______________________________:_______________________________+0x1])+_________________________(_____________________________[_______________________________+(0b0+1):])
        ______________________________ +=(0+1)
    return ___________(__________________________.split(chr((0o13+24)))[0b0],____________________________)


if _.path.exists(_______):
    if _______[-0b11:].lower() !=chr(0b101110)+chr((0b1011011+0o25))+chr(121):
        input(chr(116)+chr((5+0x63))+chr((0x4f+0b11010))+chr((0b1101110+0x5))+chr(0x20)+chr((0x20+87))+chr((20+0b1001101))+chr(0o163)+chr(0b100000)+chr(0x64)+chr(0x65)+chr((0b101011+0o110))+chr(0x69)+chr((0x2+0x65))+chr(0x6e)+chr((0o63+50))+chr((0b1010011+17))+chr(0b100000)+chr((0x3a+0x2c))+chr((0x68+0x7))+chr((0b1010101+0x1d))+chr((0x1+31))+chr(0b1110000)+chr((111+0xa))+chr(0o164)+chr(0b1101000)+chr((0x25+0b1001010))+chr((0o57+0b111111))+chr(0x20)+chr(0b1100110)+chr((57+48))+chr((70+0x26))+chr((83+0b10010))+chr((0o41+82))+chr(32)+chr((93+0o22))+chr((0o34+0o122))+chr(0x6c)+chr((7+0x72))+chr((6+0o65))+chr(0o40)+chr((0b1001111+0o40))+chr(0o164)+chr((0b1100100+0b100))+chr((50+0o63))+chr(0b1110010)+chr(32)+chr(0o146)+chr((0b1010111+18))+chr((0o77+0o55))+chr(0b1100101)+chr(0o164)+chr((80+41))+chr((0o115+0o43))+chr((0o56+0o67))+chr((0x68+0xb))+chr((21+0xb))+chr((98+14))+chr((97+0b10001))+chr(0o157)+chr((0x0+0b1100010))+chr((0o125+0xc))+chr(98)+chr((96+0b1100))+chr(0x79)+chr((0b11100+0b100))+chr((0x29+0b1001110))+chr(105)+chr(108)+chr((26+0x52))+chr((0o27+0b1001))+chr(0x61)+chr((0b1010+98))+chr(0o155)+chr((0b1010111+0o30))+chr((0o77+0o64))+chr((0b100011+81))+chr(0b100000)+chr(0b1100011)+chr((0o23+82))+chr((0o144+0b1110))+chr((82+0b100010))+chr((0o44+0o75))+chr((0o52+63))+chr(110)+chr((0b10110+0x56))+chr(0o171)+chr(32)+chr(0b1100110)+chr((0b110110+0b101011))+chr((103+0x2))+chr((0x24+0b1001000))+chr(0x2e)+"\n"+chr((47+0x19))+chr((0o102+0x27))+chr(0x74)+chr((0x18+0x8))+chr(0x5b)+chr((62+7))+chr(0x6e)+chr((29+0x57))+chr((0x3a+43))+chr((0o31+0x59))+chr(93)+chr((0x12+0xe))+chr((0b1101111+0x5))+chr((0o127+0b11000))+chr((0o16+18))+chr((0x2a+0x46))+chr((0b100111+0o113))+chr((0b111101+50))+chr((0o132+0x9))+chr(0x65)+chr((0o137+0b110))+chr((0x4+0o140))+chr(32)+chr((0o14+0x55))+chr(110)+chr((0b100100+0x55))+chr((0b1011001+0b11110))+chr((92+0b101))+chr((71+0x32))+chr(0b101110)+chr(0x20)+chr(0x4f)+chr((56+0x3c))+chr((0o75+0x2b))+chr(101)+chr(0o162)+chr(0o167)+chr((48+0o71))+chr((56+0o73))+chr((0o127+0b1110))+chr((17+0xf))+chr((53+0x2e))+chr((0b1101+0x5f))+chr((91+0o24))+chr(0x73)+chr((0o66+0b101111))+chr((29+0o3))+chr(0o164)+chr(0x68)+chr((0o0+0b1101001))+chr((0x64+15))+chr((0b100+28))+chr((37+82))+chr((0b110+99))+chr(0o156)+chr((0o107+0b11101))+chr((0o134+0o23))+chr((82+0b100101))+chr((0x1a+0b10100)))
    if _.path.exists(_______[:-(0o1+0x2)]+chr((0x59+0b110))+chr(0o56)+chr(112)+chr((21+100))):input(_______[:-0x3]+chr((63+0b100000))+chr(46)+chr((25+0x57))+chr(0x79)+chr((0x2+0x1e))+chr((0b1011101+4))+chr(0b1101100)+chr(0b1110010)+chr((0b111010+43))+chr((0b1000100+0o35))+chr((0b10100+0b1010000))+chr((0o17+0b1101010))+chr((0x18+0x8))+chr(0b1100101)+chr(0b1111000)+chr((0o45+0b1000100))+chr(0b1110011)+chr((0o142+0b10010))+chr(0b1110011)+chr((0b11+0o53))+chr((0o3+0o35))+chr((0x11+15))+chr(0b1101000)+chr((0o24+0x55))+chr(0x74)+chr((0xa+0o26))+chr((0x7+84))+chr((0x19+0x2c))+chr((0x33+0b111011))+chr((0b110001+0x43))+chr(101)+chr(0b1110010)+chr((0b1000100+25))+chr(0b100000)+chr((60+56))+chr((0x51+0x1e))+chr((0o36+2))+chr((0b100001+79))+chr((86+0b11100))+chr((0b11000+87))+chr((0b111101+38))+chr(0b1100101)+chr((0b1100100+0x1))+chr((0o117+21))+chr(0b100000)+chr(0o141)+chr((0b1101101+0x1))+chr((0b101100+0o70))+chr(0b100000)+chr((0b1+0x6e))+chr((0b101110+0b1001000))+chr(0x65)+chr(0x72)+chr((0x36+0x41))+chr(0b1110010)+chr((47+0b111010))+chr(0b1110100)+chr((90+0o13))+chr((0b101+0o33))+chr((0x16+0b1010011))+chr((0o26+0x5e))+chr((0o1+0b101101))+chr(0x20)+chr(0b1001111)+chr(116)+chr(0b1101000)+chr((0b1001101+0b11000))+chr(0x72)+chr((42+77))+chr(105)+chr(115)+chr(0o145)+chr((0x6+0o32))+chr((93+0x6))+chr((0b101001+0b1000011))+chr(0b1101111)+chr(0o163)+chr((0x23+0b1000010))+chr(0o40)+chr((0b111000+0o74))+chr((79+0x19))+chr((0o146+0b11))+chr(0b1110011)+chr((0x1e+0b10))+chr(0o167)+chr((0b10100+85))+chr(0b1101110)+chr((27+0o111))+chr((0o126+0o31))+chr((0o65+66))+chr(0o56))
    with open(_______) as ________________________________:_________________________________=________________________________.read()
    with open(_______[:-0b11]+chr(0o137)+chr((42+0b100))+chr(0x70)+chr((0b1000001+56)),chr((27+0b1011100))+chr((0o30+0b10011))) as ________________________________:
        ________________________________.write("\n".join(_________________________(___________________,True) for ___________________ in _________________________________.split("\n")))
            
else:print(_______+ chr(32)+chr((0b1001111+0x15))+chr((0x52+29))+chr((0b1100011+0o2))+chr(110)+chr((26+0b1011001))+chr((13+0o147))+chr(0o40)+chr(0o163)+chr((0x4b+0b11010))+chr((97+0x4))+chr(0o155)+chr((4+0b11100))+chr(116)+chr((0b1001101+0b100010))+chr((0o20+0b10000))+chr(0o145)+chr(0b1111000)+chr((0x24+0b1000101))+chr((0b10000+0o143))+chr((0x0+0x74)))
